Smart Voting System ‚Äî Web Application 
Core Goals
1.	Real-time face recognition for voter authentication
2.	Automatic email alerts on both successful voting and authentication failures (with captured photo, Voter ID, and timestamp)
________________________________________
Tech Stack
‚Ä¢	Frontend: HTML, CSS, JavaScript (Webcam via getUserMedia)
‚Ä¢	Backend: Python Flask
‚Ä¢	Database: PostgreSQL 
‚Ä¢	AI Model: face_recognition (dlib; ResNet-34 embeddings)
‚Ä¢	Email: SMTP (Gmail) using an app password (not a personal password)
________________________________________
App Structure
üîê Login Page (Landing)
‚Ä¢	Fullscreen background related to voting (e.g., ballot boxes, people voting).
‚Ä¢	Two large buttons:
o	Election Commission
o	Polling System
‚Ä¢	Clicking either reveals a login form (modal or slide-in):
o	Uses default admin credentials (configurable via .env or DB).
o	On success, redirect to the selected section.
________________________________________
üèõÔ∏è Election Commission Section (Admin)
Main Menu
1.	Voters
o	Add/manage voter records:
ÔÇß	Name
ÔÇß	Age
ÔÇß	Date of Birth
ÔÇß	Voter ID Number (unique)
ÔÇß	Gender
ÔÇß	Email
ÔÇß	Face enrollment via webcam (capture 1‚Äì5 images; store 128-D encoding(s))
o	Actions: Create, Read, Update, Delete (CRUD)
o	Bulk import (CSV) optional
2.	Parties
o	Manage political parties and candidates:
ÔÇß	Party Name
ÔÇß	Party Symbol (image upload; SVG/PNG)
ÔÇß	Candidate Name (per party)
ÔÇß	Candidate image(image upload)
o	CRUD + image validation (type/size)
3.	Results
o	Live vote counts per party and candidate, auto-refresh
o	Winner declaration (max votes; tie handling rule required)
o	Export reports (CSV + PDF) including:
ÔÇß	Totals, per-party, per-candidate breakdown
ÔÇß	Number of NOTA votes
ÔÇß	Timestamp and election metadata
o	Option to reset tallies for a new election (with double confirmation)
________________________________________
üó≥Ô∏è Polling System Section (Voter)
Step 1 ‚Äî Voter Authentication
‚Ä¢	Input: Voter ID Number
‚Ä¢	System verifies:
1.	Voter exists and hasn‚Äôt voted yet
2.	Real-time face verification via webcam
ÔÇß	Detect face using face_recognition.face_locations(image, model="hog" | "cnn")
ÔÇß	Default: hog (CPU friendly); Config option: cnn (more accurate, higher compute)
ÔÇß	Generate 128-D face encoding via dlib/ResNet-34
ÔÇß	Compare with stored encoding(s) using Euclidean distance
ÔÇß	Match if distance < 0.6 (threshold configurable)
If Face Matches (Success)
‚Ä¢	Redirect to Voting Page
If Face Does Not Match (Failure)
‚Ä¢	Trigger:
o	Red blinking screen
o	Beeping alarm sound
o	Email alert from electioncomission101@gmail.com to:
ÔÇß	mithraa1906@gmail.com (Election Commissioner)
ÔÇß	The voter‚Äôs registered email
o	Email content must include:
ÔÇß	Captured photo of the person attempting (attach image)
ÔÇß	Voter ID used
ÔÇß	Timestamp (UTC and local time)

Step 2 ‚Äî Voting Page
‚Ä¢	Display list of:
o	Party Names
o	Party Symbols
o	Candidate Names
o	Candidate image
‚Ä¢	Options:
o	Select one candidate or NOTA
‚Ä¢	On submission:
o	Record the vote (atomic DB transaction)
o	Mark voter as voted
o	Send confirmation email to the voter:
ÔÇß	Subject: ‚ÄúVote Cast Successfully‚Äù
ÔÇß	Body: Party/Candidate (or NOTA) + timestamp + reference ID
o	Show on-screen success page
________________________________________
AI / Face Recognition Details
1.	Detection
o	face_recognition.face_locations(image, model="hog") (default)
o	Configurable to model="cnn" when GPU or high compute is available
2.	Recognition
o	Deep Metric Learning (dlib, ResNet-34)
o	Create 128-D embeddings
o	Compare via Euclidean distance
o	Threshold 0.6 (configurable per deployment)
o	Store multiple embeddings per voter (improves robustness)
3.	 Anti-Spoofing
o	Simple liveness checks:
ÔÇß	Blink detection prompt or head-turn prompt
ÔÇß	Frame-to-frame consistency
o	Log suspicion score; still send alerts on mismatch
________________________________________
Security & Compliance
‚Ä¢	Store credentials, SMTP settings, and thresholds in .env (use python-dotenv)
‚Ä¢	Never store plaintext email/app passwords in code or repo
‚Ä¢	Hash admin passwords 
‚Ä¢	Use CSRF protection for forms; validate file uploads (MIME/size)
‚Ä¢	HTTPS in production
‚Ä¢	Audit logs for:
o	Logins (admin and polling)
o	Auth successes/failures (with metadata)
o	Vote casting events (no PII tied to ballot choice beyond allowed reporting)
‚Ä¢	Rate limit authentication endpoints
‚Ä¢	Ensure one vote per voter (DB unique constraints + transactional logic)
________________________________________
Database Schema (Illustrative)
voters
‚Ä¢	id (pk)
‚Ä¢	voter_id (unique)
‚Ä¢	name
‚Ä¢	age
‚Ä¢	dob (date)
‚Ä¢	gender
‚Ä¢	email (unique)
‚Ä¢	has_voted (boolean, default false)
‚Ä¢	created_at, updated_at
voter_faces
‚Ä¢	id (pk)
‚Ä¢	voter_id (fk ‚Üí voters.id)
‚Ä¢	encoding (vector serialized as 128 floats; store as JSON or BYTEA)
‚Ä¢	image_snapshot_path (optional)
‚Ä¢	created_at
parties
‚Ä¢	id (pk)
‚Ä¢	name (unique)
‚Ä¢	symbol_path (string)
‚Ä¢	created_at, updated_at
candidates
‚Ä¢	id (pk)
‚Ä¢	party_id (fk ‚Üí parties.id)
‚Ä¢	name
‚Ä¢	created_at, updated_at
votes
‚Ä¢	id (pk)
‚Ä¢	voter_id (fk ‚Üí voters.id, unique) // ensures one vote per voter
‚Ä¢	candidate_id (nullable fk ‚Üí candidates.id) // null if NOTA
‚Ä¢	nota (boolean default false; enforce XOR with candidate_id)
‚Ä¢	cast_at (timestamp)
‚Ä¢	audit_ref (string)
auth_events
‚Ä¢	id (pk)
‚Ä¢	voter_id (nullable fk ‚Üí voters.id) // may be unknown on fraud
‚Ä¢	voter_id_input (string)
‚Ä¢	result (enum: success|mismatch|unknown)
‚Ä¢	distance (float, nullable)
‚Ä¢	snapshot_path (string)
‚Ä¢	ip_address, user_agent
‚Ä¢	created_at
________________________________________
API Endpoints (Representative)
Auth / Sessions
‚Ä¢	POST /login ‚Äì admin/polling login
Admin
‚Ä¢	GET/POST/PUT/DELETE /admin/voters
‚Ä¢	POST /admin/voters/{id}/enroll-face ‚Äì capture & store embeddings
‚Ä¢	GET/POST/PUT/DELETE /admin/parties
‚Ä¢	GET/POST/PUT/DELETE /admin/candidates
‚Ä¢	GET /admin/results/live ‚Äì JSON counts
‚Ä¢	GET /admin/results/export.csv
‚Ä¢	GET /admin/results/export.pdf
‚Ä¢	POST /admin/election/reset (double confirm)
Polling
‚Ä¢	POST /poll/auth/start ‚Äì submit Voter ID, open webcam session
‚Ä¢	POST /poll/auth/verify ‚Äì upload frame(s), return match/mismatch (+distance)
‚Ä¢	GET /poll/ballot ‚Äì list parties/candidates/NOTA
‚Ä¢	POST /poll/vote ‚Äì record vote (atomic), send success email
Alerts
‚Ä¢	Internal service to send emails on:
o	mismatch with photo attachment
o	vote_success confirmation
________________________________________
Email Requirements
SMTP Sender: electioncomission101@gmail.com (use Gmail app password(trqc subs fkim wbrp))

On Successful Vote (to voter):
‚Ä¢	Subject: ‚ÄúYour vote has been recorded‚Äù
‚Ä¢	Body:
o	‚ÄúDear {Name}, your vote was recorded on {timestamp}. Choice: {Party/Candidate or NOTA}. Reference: {audit_ref}.‚Äù
On Authentication Failure (to mithraa1906@gmail.com AND voter):
‚Ä¢	Subject: ‚ÄúALERT: Face authentication failure for Voter ID {VoterID}‚Äù
‚Ä¢	Body includes:
o	Voter ID used
o	Timestamp (UTC and local)
o	Distance score (if available)
o	IP/User-Agent (if available)
o	Attached captured photo from the attempt
________________________________________
Frontend Interactions
‚Ä¢	Webcam: Use navigator.mediaDevices.getUserMedia({ video: true })
‚Ä¢	Red Blink + Beep: CSS animation for background flash; HTML5 Audio for beep
‚Ä¢	Accessibility: High-contrast buttons, keyboard navigation
‚Ä¢	Validation: Inline form validation; descriptive errors
________________________________________
Result Logic & Reporting
‚Ä¢	Live tallies (poll every 2‚Äì5 seconds or server-sent events)
‚Ä¢	Winner = candidate with the most votes; define tie policy (e.g., ‚Äútie ‚Äî no auto winner; admin decides‚Äù)
‚Ä¢	Include NOTA in totals
‚Ä¢	Exports:
o	CSV: headers for parties, candidates, counts, NOTA, totals
o	PDF: summary + charts (optional)
________________________________________
Configuration (via .env)
‚Ä¢	ADMIN_DEFAULT_USER, ADMIN_DEFAULT_PASS
‚Ä¢	DB_URL (PostgreSQL)
‚Ä¢	EMAIL_USER, EMAIL_APP_PASSWORD, EMAIL_FROM
‚Ä¢	FACE_MODEL = hog | cnn
‚Ä¢	FACE_THRESHOLD = 0.6
‚Ä¢	ALERT_RECIPIENT = mithraa1906@gmail.com
________________________________________
Acceptance Criteria (Key)
‚Ä¢	‚úÖ Voter can authenticate only if face match and valid Voter ID
‚Ä¢	‚úÖ On mismatch, red blink + beep + email alert with photo is sent to commissioner and voter
‚Ä¢	‚úÖ On successful vote, record saved, voter locked, confirmation email sent
‚Ä¢	‚úÖ Admin can CRUD voters (with face enrollment), parties, candidates
‚Ä¢	‚úÖ Results show live counts, winner, and export works
‚Ä¢	‚úÖ All secrets in .env; passwords hashed; uploads validated
________________________________________
